<?xml version="1.0" encoding="UTF-8"?>
<job>
	<reference object="WIA.ImageProcess"/>
	<script language="JScript" src="config.js"/>
	<script language="JScript" src="includes\general.js"/>
	<script language="JScript" src="includes\json2.min.js"/>
	<script language="JScript" src="includes\worker.core.js">
	<![CDATA[
		// Flag for worker loop
	var	wait = true,
		// Object for operations with file system
		fso = new ActiveXObject('Scripting.FileSystemObject'),
		// Canvas image
		canvasImage = new ActiveXObject("WIA.ImageFile"),
		// result image canvas
		canvas,
		// Picture image
		image = new ActiveXObject("WIA.ImageFile");

	// Loading canvas image
	if(!fso.fileExists(config.frame.canvas)) throw new Error('Failed to load canvas image "' + config.frame.canvas + '"');
	canvasImage.LoadFile(config.frame.canvas);
		
	// Function for adding filters
	function addFilter(imageProcess,filterName){
		imageProcess.Filters.Add(imageProcess.FilterInfos(filterName).FilterID);
		return imageProcess.Filters(imageProcess.Filters.Count)
	}

	// Message receive event
	function onmessage(params){
		// Image processor
		var imageProcess = new ActiveXObject("WIA.ImageProcess");		
		
		/*
			canvas (scale)
				background (scale, stamp)
					image  (scale, stamp)
						frame  (stamp)
		*/

		// Loading frame info and image
		var frame = getRandomItem(config.frames);
		if(!frame.image){
			frame.image = new ActiveXObject("WIA.ImageFile");
			if(!fso.fileExists(frame.source)) throw new Error('Failed to load frame image "' + frame.source + '"');
			frame.image.LoadFile(frame.source);
		}

		// Scalling canvas to frame size
		with(addFilter(imageProcess,"Scale")){
			Properties("MaximumWidth")	= frame.image.width;
			Properties("MaximumHeight")	= frame.image.height;
			Properties("PreserveAspectRatio") = false;			
		}
		canvasImage = imageProcess.Apply(canvasImage);

		// Loading frame background image
		var background = getRandomItem(config.frame.backgrounds),
			// Calculating picture inner area
			innerWidth	= canvasImage.width - frame.paddings.left - frame.paddings.right,
			innerHeight	= canvasImage.height - frame.paddings.top - frame.paddings.bottom;

		// Cheking if background image is already loaded
		if(!background.image){
			background.image = new ActiveXObject("WIA.ImageFile");		
			if(!fso.fileExists(background.path)) throw new Error('Failed to load frame background image "' + background.path + '"');
			background.image.LoadFile(background.path);
		}

		// Scalling background
		with(imageProcess.Filters(1)){
			Properties("MaximumWidth")	= innerWidth;
			Properties("MaximumHeight")	= innerHeight;
			Properties("PreserveAspectRatio") = false;			
		}
		background.image = imageProcess.Apply(background.image);

		// Loading picture image
		if(!fso.fileExists(params.filePath)) throw new Error('Failed to load frame image "' + params.filePath + '"');
		
		//if(params.filePath.indexOf('01') > 0 || params.filePath.indexOf('03') > 0) {
		//	var start = new Date();
		//	while(new Date() - start < 30000){}
		//}
		image.LoadFile(params.filePath);

		// Scalling image
		imageProcess.Filters(1).Properties("PreserveAspectRatio") = true;			
		image = imageProcess.Apply(image);
		
		// Removing scale filter
		imageProcess.Filters.Remove(1);
		
		// Stamping scaled background on canvas
		with(addFilter(imageProcess,"Stamp")){
			Properties("ImageFile") = background.image;
			Properties("Left") = frame.paddings.left
			Properties("Top") = frame.paddings.top
		}	

		// Stamping scaled image on canvas
		with(addFilter(imageProcess,"Stamp")){
			Properties("ImageFile") = image;
			Properties("Left") = frame.paddings.left + (innerWidth - image.width) / 2;
			Properties("Top") = frame.paddings.top + (innerHeight - image.height) / 2;
		}	

		// Stamping frame image finally
		with(addFilter(imageProcess,"Stamp")){
			Properties("ImageFile") = frame.image;
			Properties("Left") = 0;
			Properties("Top") = 0;
		}	

		with(addFilter(imageProcess,"Scale")){
			Properties("MaximumWidth")	= params.width;
			Properties("MaximumHeight")	= params.height;
			Properties("PreserveAspectRatio") = true;			
		}		
		
		canvas = imageProcess.Apply(canvasImage);
		
		// Sending back image data
		postMessage({
			status:		1,
			index:		params.index,
			filePath:	params.filePath,
			width:		canvasImage.width,
			height:		canvasImage.height,
			binaryData:	encoder.encode('bin.base64',canvas.FileData.BinaryData)
		})	
	}
	
	// Event of host termination
	function onhostterminate(){
		wait = false
	}

	// informing host that worker is ready for receiving tasks.
	postMessage({
		status:0
	});

	// Loop for holding worker in memory
	while(wait){
		WSH.Sleep(100);
	}
	]]>
	</script>
</job>